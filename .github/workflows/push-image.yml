# This workflow build and push a Docker container to Google Artifact Registry
# and deploy it on Cloud Run when a commit is pushed to the "main"
# branch.
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Cloud Run (run.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Cloud Run Developer (roles/run.developer)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources
#
# 3. Change the values in the "env" block to match your values.

name: 'Build Whisp Image and Push to Container Registry'

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE: ${{ secrets.GCP_SERVICE }}
  REPOSITORY: ${{ secrets.GCP_REPOSITORY }}
  KEY: ${{ secrets.GCP_SA_KEY }}
  DB_URL: ${{ secrets.GOOSE_DBSTRING }}
  TENOR_KEY: ${{ secrets.TENOR_API_KEY }}
  GHCR_USER: andrearcaina
  GHCR_PASS: ${{ secrets.WHISP_GHCR_PAT }}

jobs:
  deploy:
    runs-on: 'ubuntu-latest'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4'

      # - name: 'Authenticate to Google Cloud'
      #   uses: 'google-github-actions/auth@v2'
      #   with:
      #    credentials_json: '${{ env.KEY }}'

      # - name: 'Set up Cloud SDK'
      #   uses: 'google-github-actions/setup-gcloud@v2'

      # - name: 'Configure Docker to use gcloud as a credential helper'
      #   run: |
      #    gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_USER }}
          password: ${{ env.GHCR_PASS }}

      - name: 'Build and Push Image to GitHub Container Registry (GHCR)'
        run: |
          IMAGE="ghcr.io/${{ env.GHCR_USER }}/whisp:${{ github.sha }}"
          LATEST="ghcr.io/${{ env.GHCR_USER }}/whisp:latest"
          echo "Building image: $IMAGE"
          docker build --target production -t $IMAGE -t $LATEST .
          docker push $IMAGE
          docker push $LATEST

      # - name: 'Build and Push Container to Google Artifact Registry'
      #  run: |
      #    IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/whisp:${{ github.sha }}"
      #    LATEST="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/whisp:latest"
      #    echo "Building image: $IMAGE"
      #    docker build --target production -t $IMAGE -t $LATEST .
      #    docker push $IMAGE
      #    docker push $LATEST

      # - name: 'Deploy to Cloud Run'
      #  run: |
      #    IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/whisp:${{ github.sha }}"
      #    gcloud run deploy ${{ env.SERVICE }} \
      #      --image $IMAGE \
      #      --region ${{ env.REGION }} \
      #      --platform managed \
      #      --allow-unauthenticated \
      #     --port 8080 \
      #     --set-env-vars "GOOSE_DBSTRING=${{ env.DB_URL }}, TENOR_API_KEY=${{ env.TENOR_KEY }}"