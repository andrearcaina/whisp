// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: message.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (message, image_url, gif_url)
VALUES ($1, $2, $3)
RETURNING id, message, image_url, gif_url, created_at
`

type CreateMessageParams struct {
	Message  pgtype.Text `json:"message"`
	ImageUrl pgtype.Text `json:"image_url"`
	GifUrl   pgtype.Text `json:"gif_url"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage, arg.Message, arg.ImageUrl, arg.GifUrl)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Message,
		&i.ImageUrl,
		&i.GifUrl,
		&i.CreatedAt,
	)
	return i, err
}

const listMessages = `-- name: ListMessages :many
SELECT id, message, image_url, gif_url, created_at FROM messages
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListMessagesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMessages(ctx context.Context, arg ListMessagesParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, listMessages, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.ImageUrl,
			&i.GifUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
