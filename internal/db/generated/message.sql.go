// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: message.sql

package generated

import (
	"context"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (message)
VALUES ($1)
RETURNING id, message, created_at
`

func (q *Queries) CreateMessage(ctx context.Context, message string) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage, message)
	var i Message
	err := row.Scan(&i.ID, &i.Message, &i.CreatedAt)
	return i, err
}

const listMessages = `-- name: ListMessages :many
SELECT id, message, created_at FROM messages
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListMessagesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMessages(ctx context.Context, arg ListMessagesParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, listMessages, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(&i.ID, &i.Message, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
